{
  "input": {
    "workflow": [
      {
        "action": "navigate",
        "url": "https://www.generac.com/dealer-locator/"
      },
      {
        "action": "click",
        "selector": "button:has-text('Accept Cookies')"
      },
      {
        "action": "fill",
        "selector": "input[name*='zip' i]",
        "text": "53202"
      },
      {
        "action": "click",
        "selector": "button:has-text('Search')"
      },
      {
        "action": "wait",
        "timeout": 3000
      },
      {
        "action": "evaluate",
        "script": "() => {   const phoneLinks = Array.from(document.querySelectorAll('a[href^=\"tel:\"]'));    const dealers = phoneLinks.map(phoneLink => {     let container = phoneLink;     for (let i = 0; i < 10; i++) {       container = container.parentElement;       if (!container) break;       const hasDistance = container.querySelector('.ms-auto.text-end.text-nowrap');       if (hasDistance) break;     }      if (!container) return null;      const allDivs = Array.from(container.querySelectorAll('div'));     let dealerName = '';     for (const div of allDivs) {       const text = div.textContent.trim();       if (text && text.length > 5 && text.length < 100 &&           !text.includes('(') && !text.includes('http') &&           !text.includes('mi') && text === text.toUpperCase()) {         dealerName = text;         break;       }     }      const fullText = container.textContent;     const phoneText = phoneLink.textContent.trim();     const beforePhone = fullText.substring(0, fullText.indexOf(phoneText));      const ratingMatch = fullText.match(/(\\d+\\.\\d+)\\s*\\((\\d+)\\)/);     const rating = ratingMatch ? parseFloat(ratingMatch[1]) : 0;     const reviewCount = ratingMatch ? parseInt(ratingMatch[2]) : 0;      const isPremier = fullText.includes('Premier Dealers demonstrate');     const isElitePlus = fullText.includes('Elite Plus');     const isElite = fullText.includes('Elite Dealers offer');      let tier = 'Standard';     if (isPremier) tier = 'Premier';     else if (isElitePlus) tier = 'Elite Plus';     else if (isElite) tier = 'Elite';      const isPowerProPremier = fullText.includes('PowerPro') || fullText.includes('Premier');      const streetMatch = beforePhone.match(/(\\d+\\s+[nsew]?\\d*\\s*[^\\n,]*(?:st|street|dr|drive|rd|road|ave|avenue|ct|court|blvd|ln|way|pl)\\.?)/i);     let street = streetMatch ? streetMatch[1].trim() : '';     street = street.replace(/^.*?out of \\d+ stars\\.\\s*\\d*\\s*reviews?\\s*/i, '');     street = street.replace(/^\\d+\\.\\d+\\s*\\(\\d+\\)/, '');     street = street.replace(/^\\d+\\.\\d+\\s*mi/, '');      const afterStreet = street ? beforePhone.substring(beforePhone.lastIndexOf(street) + street.length) : beforePhone;     const cityStateZip = afterStreet.match(/([a-z\\s]+),?\\s*([A-Z]{2})\\s+(\\d{5})/i);      const city = cityStateZip ? cityStateZip[1].trim() : '';     const state = cityStateZip ? cityStateZip[2] : '';     const zip = cityStateZip ? cityStateZip[3] : '';      const websiteLink = container.querySelector('a[href^=\"http\"]:not([href*=\"google\"]):not([href*=\"facebook\"])');     const website = websiteLink?.href || '';      let domain = '';     if (website) {       try {         const url = new URL(website);         domain = url.hostname.replace('www.', '');       } catch (e) {         domain = '';       }     }      const distanceEl = container.querySelector('.ms-auto.text-end.text-nowrap');     const distance = distanceEl?.textContent?.trim() || '';     const distanceMiles = parseFloat(distance) || 0;      return {       name: dealerName,       rating: rating,       review_count: reviewCount,       tier: tier,       is_power_pro_premier: isPowerProPremier,       street: street,       city: city,       state: state,       zip: zip,       address_full: street && city ? `${street}, ${city}, ${state} ${zip}` : '',       phone: phoneText,       website: website,       domain: domain,       distance: distance,       distance_miles: distanceMiles     };   });    return dealers.filter(d => d && d.name); }"
      }
    ]
  }
}
